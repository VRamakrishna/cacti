// This file is @generated by prost-build.
/// the payload to define the data that is being requested
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Query {
    #[prost(string, repeated, tag = "1")]
    pub policy: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub requesting_relay: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub requesting_network: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub certificate: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub requestor_signature: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub nonce: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub requesting_org: ::prost::alloc::string::String,
    #[prost(bool, tag = "10")]
    pub confidential: bool,
    #[prost(message, optional, tag = "11")]
    pub encryption_info: ::core::option::Option<EncryptionInfo>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptionInfo {
    #[prost(enumeration = "EncryptionMechanism", tag = "1")]
    pub mechanism: i32,
    /// Either:
    ///     (1) an X.509 certificate, if 'encryptionMechanism' == 'ECIES', or
    ///     (2) a base64 encoding of an SRS structure (byte array or byte array + integer count), ie 'encryptionMechanism' == 'DBE'
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EncryptionMechanism {
    Ecies = 0,
    Dbe = 1,
}
impl EncryptionMechanism {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EncryptionMechanism::Ecies => "ECIES",
            EncryptionMechanism::Dbe => "DBE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ECIES" => Some(Self::Ecies),
            "DBE" => Some(Self::Dbe),
            _ => None,
        }
    }
}
